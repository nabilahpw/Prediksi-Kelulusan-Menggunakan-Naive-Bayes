# -*- coding: utf-8 -*-
"""Prediksi Kelulusan Naive Bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18KamuT8eG98pN2rD3-khd6rSB5t72ESC

# **PREDIKSI KELULUSAN MAHASISWA MENGGUNAKAN ALGORITMA KLASIFIKASI NAIVE BAYES**
"""

#Memanggil library
import pandas as pd
import numpy as np

# Membaca data kelulusan Mahasiswa
mhs = pd.read_excel('Data Kelulusan Mahasiswa.xlsx')
mhs.head()

#membuat atribut reguler
x = mhs.drop(['StatusKelulusan'],axis = 1)
x.head()

#membuat atribut target/ class
y = mhs['StatusKelulusan']
y.head()

#import gausian naive bayes model
from sklearn.naive_bayes import GaussianNB

#memanggil fungsi Gaussian Naive Bayes
nbc = GaussianNB()

#Memasukkan data training ke dalam fungsi klassifikasi naive bayes
data_training = nbc.fit(x,y)

#melakukan prediksi pada data training
y_predict = data_training.predict(x)
print(y_predict)

#menghitung akurasi --> melihat skor akurasi
from sklearn.metrics import accuracy_score
print('Nilai akurasi = %0.2f' % accuracy_score(y,y_predict))

# Mencetak laporan hasil klasifikasi
from sklearn.metrics import classification_report
print(classification_report(y,y_predict))

# prompt: CONFUSION MATRIX GRAFIK

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'y' is your true labels and 'y_predict' are your predicted labels
# If not defined in the preceding code, replace with your actual variables

# Calculate the confusion matrix
cm = confusion_matrix(y, y_predict)

# Plot the confusion matrix using seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Tidak Lulus', 'Lulus'],
            yticklabels=['Tidak Lulus', 'Lulus']) # Assuming binary classification 'Tidak Lulus'/'Lulus'
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""# **UJI DENGAN DATA TESTING**

## DATA TESTING 1
"""

#melakukan prediksi pada data input --> data yang akan diprediksi
Jenis_Kelamin = 1 #1 = Pria
Status_Kerja = 0 # 0 = Mahasiswa
Umur = 25
Status_Nikah = 1 # 1 = Menikah
IPS1 = 1.12
IPS2 = 1.75
IPS3 = 2.05
IPS4 = 1.01
IPS5 = 2.56
IPS6 = 2.67
IPS7 = 2.75
IPS8 = 2.45
IPK = np.average([IPS1,IPS2,IPS3,IPS4,IPS5,IPS6,IPS7,IPS8])
Data_testing1 = [[Jenis_Kelamin, Status_Kerja, Umur,
                  Status_Nikah,IPS1,IPS2,IPS3,IPS4,IPS5,
                  IPS6,IPS7,IPS8,IPK]]
Data_testing1

#Melakukan prediksi berdasarkan data input
y_pred1 =data_training.predict(Data_testing1)
print(y_pred1)

#Mencetak hasil prediksi kelulusan
# hasil 0 = Terlambat, 1 = tepat
if y_pred1 ==0:
  hasil = 'Terlambat'
elif y_pred1 == 1:
  hasil = 'Tepat'
else :
  hasil = 'Error'
print('Hasil Prediksi Kelulusan : ', hasil)

"""## DATA TESTING 2"""

#melakukan prediksi pada data input --> data yang akan diprediksi
Jenis_Kelamin = 1 #1 = Pria
Status_Kerja = 0 # 0 = Mahasiswa
Umur = 25
Status_Nikah = 1 # 1 = Menikah
IPS1 = 3.12
IPS2 = 3.75
IPS3 = 3.05
IPS4 = 3.01
IPS5 = 3.56
IPS6 = 3.67
IPS7 = 3.75
IPS8 = 3.45
IPK = np.average([IPS1,IPS2,IPS3,IPS4,IPS5,IPS6,IPS7,IPS8])
Data_testing2 = [[Jenis_Kelamin, Status_Kerja, Umur, Status_Nikah,IPS1,IPS2,IPS3,IPS4,IPS5,IPS6,IPS7,IPS8,IPK]]
Data_testing2

y_pred2 =data_training.predict(Data_testing2)
y_pred2

#Mencetak hasil prediksi kelulusan
# hasil 0 = Terlambat, 1 = tepat
if y_pred2 ==0:
  hasil = 'Terlambat'
elif y_pred2 == 1:
  hasil = 'Tepat'
else :
  hasil = 'Error'
print('Hasil Prediksi Kelulusan : ', hasil)